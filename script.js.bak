customElements.define('crokinole-scoreboard', class extends HTMLElement {

  constructor() {

    super();

    this.default_players = {
      player_1: {
        name: 'Player 1',
        color: '#C1A469',
        score: 0
      },
      player_2: {
        name: 'Player 2',
        color: '#222222',
        score: 0
      }
    };

    let players_non_proxy = this.default_players;

    // let players = this.default_players;

    this.validator = {
      set: function(target, key, value) {
        console.log(`The property ${key} has been updated with ${value}`);
        return true;
      }
    };
    let players = new Proxy(players_non_proxy, this.validator);

    this.loadData();
  }

  // Load data from localStorage or default_players
  loadData() {
    if (typeof(Storage) !== 'undefined') {
      // this.players = JSON.parse(localStorage.getItem('crokinole-scoreboard')) || this.default_players;
      // use proxy to watch for changes to the players object
      this.players = new Proxy(JSON.parse(localStorage.getItem('crokinole-scoreboard')) || this.default_players, this.validator);
      console.log(this.players);
    } else {
      // this.players = this.default_players;
      // use proxy to watch for changes to the players object
      this.players = new Proxy(this.default_players, this.validator);
    }
    document.getElementById('player-1-name').value = this.players.player_1.name;
    document.getElementById('player-1-score').value = this.players.player_1.score;
    document.getElementById('player-2-name').value = this.players.player_2.name;
    document.getElementById('player-2-score').value = this.players.player_2.score;
    // set player pieces to the correct colors with css variables
    document.querySelector('.player-piece[data-player="player_1"]').style.setProperty('--player-color', this.players.player_1.color);
    document.querySelector('.player-piece[data-player="player_2"]').style.setProperty('--player-color', this.players.player_2.color);
    // update player pieces to the correct colors
    this.updatePlayerPieces();
  }

  // Watch for changes to the players object
  static get observedAttributes() {
    console.log('observedAttributes');
    return ['players'];
  }

  // Save data to localStorage
  saveData() {
    if (typeof(Storage) !== 'undefined') {
      localStorage.setItem('crokinole-scoreboard', JSON.stringify(this.players));
    } else {
      console.log('localStorage is not available');
    }
  }

  // Reset all data
  resetAllData() {
    this.players = this.default_players;
    document.getElementById('player-1-name').value = this.players.player_1.name;
    document.getElementById('player-1-score').value = this.players.player_1.score;
    document.getElementById('player-2-name').value = this.players.player_2.name;
    document.getElementById('player-2-score').value = this.players.player_2.score;
    this.updatePlayerPieces();
    this.saveData();
  }

  // Reset scores
  resetScore() {
    this.players.player_1.score = 0;
    document.getElementById('player-1-score').value = 0;
    this.players.player_2.score = 0;
    document.getElementById('player-2-score').value = 0;
    this.updatePlayerPieces();
    this.saveData();
  }

  // Update player pieces' colors and positions
  updatePlayerPieces() {
    document.querySelector('.player-piece[data-player="player_1"]').style.setProperty('--player-score', `${this.players.player_1.score}%`);
    document.querySelector('.player-piece[data-player="player_2"]').style.setProperty('--player-score', `${this.players.player_2.score}%`);
    document.querySelector('.player-piece[data-player="player_1"]').style.setProperty('--player-color', this.players.player_1.color);
    document.querySelector('.player-piece[data-player="player_2"]').style.setProperty('--player-color', this.players.player_2.color);
  }

  // Handle events
  handleEvent(event) {
    this[`on${event.type}`](event);
  }

  // Click events
  onclick(event) {
    // Reset scores if the reset-score button is clicked
    if (event.target.id === 'reset-score') {
      this.resetScore();
    }
    // Reset all data if the reset-all button is clicked
    if (event.target.id === 'reset-all') {
      this.resetAllData();
    }
    // Increment or decrement a player's score if the event target is an increment or decrement button
    if (event.target.classList.contains('increment') || event.target.classList.contains('decrement')) {
      // Get the player number from the event target id
      let player_number = event.target.dataset.player.split('_')[1];
      // Get the player score from the input
      let player_score = document.getElementById(`player-${player_number}-score`).value;
      // Increment or decrement the player score by 5
      if (event.target.classList.contains('increment') && player_score < 100) {
        player_score = parseInt(player_score) + 5;
      } else if (event.target.classList.contains('decrement') && player_score > 0) {
        player_score = parseInt(player_score) - 5;
      }
      // Set the player score to the incremented or decremented value
      document.getElementById(`player-${player_number}-score`).value = player_score;
      // Save the player score to localStorage
      this.players[`player_${player_number}`].score = player_score;
      // Update the player pieces' colors and positions
      this.updatePlayerPieces();
      // Save the players object to localStorage
      this.saveData();
    }
  }

  // Input events
  oninput(event) {
    // If a player's name is changed, update the players object and save it to localStorage
    if (event.target.classList.contains('player-name')) {
      let player_number = event.target.dataset.player.split('_')[1];
      this.players[`player_${player_number}`].name = event.target.value;
      this.saveData();
    }
    // If a player's score is changed, update the players object and save it to localStorage
    if (event.target.classList.contains('player-score')) {
      let player_number = event.target.dataset.player.split('_')[1];
      this.players[`player_${player_number}`].score = event.target.value;
      this.updatePlayerPieces();
      this.saveData();
    }
  }

  // Listen for events
  connectedCallback() {
    this.addEventListener('click', this);
    this.addEventListener('input', this);
  }

  });